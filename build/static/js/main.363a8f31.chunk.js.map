{"version":3,"sources":["firebase.js","component/Post/Post.js","component/UploadImage/UploadImage.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","user","postId","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","src","alt","id","key","text","type","placeholder","value","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","UploadImage","setCaption","image","setImage","progress","setProgress","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","React","modalStyle","classes","posts","setPosts","open","setOpen","setUsername","password","setPassword","email","setEmail","setUser","openSignIn","setOpenSignIn","onAuthStateChanged","authUser","post","Modal","onClose","style","Input","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oVAaMA,EAXcC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGIC,YACjBC,EAAOX,IAASW,OAChBC,EAAUZ,IAASY,UCsEVC,MA9Ef,YAA8D,IAA9CC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAAY,EAC3BC,mBAAS,IADkB,mBACpDC,EADoD,KAC1CC,EAD0C,OAE7BF,mBAAS,IAFoB,mBAEpDG,EAFoD,KAE3CC,EAF2C,KAiC3D,OA5BAC,qBAAU,WACR,IAAIC,EAWJ,OAVIV,IACFU,EAAc1B,EACX2B,WAAW,SACXC,IAAIZ,GACJW,WAAW,YACXE,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACXT,EAAYS,EAASC,KAAKC,KAAI,SAACL,GAAD,OAASA,EAAIM,eAG1C,WACLR,OAED,CAACV,IAcF,yBAAKmB,UAAU,QACb,yBAAKA,UAAU,eACb,kBAACC,EAAA,EAAD,CAAQD,UAAU,cAAcE,IAAKlB,EAAUmB,IAAKrB,IACpD,4BAAKA,IAEP,yBAAKkB,UAAU,aAAaE,IAAKlB,EAAUmB,IAAI,UAE/C,wBAAIH,UAAU,aACZ,gCAASlB,GACRC,GAGH,yBAAKiB,UAAU,iBACZd,EAASY,KAAI,SAACV,EAASgB,GAAV,OACZ,uBAAGC,IAAKD,GACN,gCAAShB,EAAQN,UAChBM,EAAQkB,UAKd1B,GACC,0BAAMoB,UAAU,oBACd,2BACEA,UAAU,aACVO,KAAK,OACLC,YAAY,mBACZC,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAOtB,EAAWsB,EAAEC,OAAOH,UAEvC,4BACET,UAAU,cACVa,UAAWzB,EACXmB,KAAK,SACLO,QA9CU,SAACC,GACnBA,EAAMC,iBAENnD,EAAG2B,WAAW,SAASC,IAAIZ,GAAQW,WAAW,YAAYyB,IAAI,CAC5DX,KAAMlB,EACNN,SAAUF,EAAKsC,YACfC,UAAWrD,IAASU,UAAU4C,WAAWC,oBAE3ChC,EAAW,MAkCL,W,sCCAKiC,MAhEf,YAAoC,IAAbxC,EAAY,EAAZA,SAAY,EACHG,mBAAS,IADN,mBAC1BF,EAD0B,KACjBwC,EADiB,OAEPtC,mBAAS,MAFF,mBAE1BuC,EAF0B,KAEnBC,EAFmB,OAGDxC,mBAAS,GAHR,mBAG1ByC,EAH0B,KAGhBC,EAHgB,KAiDjC,OACE,yBAAK3B,UAAY,gBACf,8BAAUA,UAAY,wBAAwBS,MAAOiB,EAAUE,IAAI,QACnE,2BACErB,KAAK,OACLC,YAAY,qBACZE,SAAU,SAACK,GAAD,OAAWQ,EAAWR,EAAMH,OAAOH,QAC7CA,MAAO1B,IAET,2BAAOwB,KAAK,OAAOG,SArDF,SAACC,GAChBA,EAAEC,OAAOiB,MAAM,IACjBJ,EAASd,EAAEC,OAAOiB,MAAM,OAoDxB,kBAACC,EAAA,EAAD,CAAQhB,QAjDS,WACApC,EAAQqD,IAAR,iBAAsBP,EAAMQ,OAAQC,IAAIT,GAEhDU,GACT,iBACA,SAACtC,GAEC,IAAM8B,EAAWS,KAAKC,MACnBxC,EAASyC,iBAAmBzC,EAAS0C,WAAc,KAEtDX,EAAYD,MAEd,SAACa,GAECC,QAAQC,IAAIF,GACZG,MAAMH,EAAMI,YAEd,WAEEjE,EACGqD,IAAI,UACJa,MAAMpB,EAAMQ,MACZa,iBACAC,MAAK,SAACC,GAELlF,EAAG2B,WAAW,SAASyB,IAAI,CACzBE,UAAWrD,IAASU,UAAU4C,WAAWC,kBACzCtC,QAASA,EACTC,SAAU+D,EACVjE,SAAUA,IAGZ6C,EAAY,GACZJ,EAAW,IACXE,EAAS,cAef,Y,MCrDN,SAASuB,IAIP,MAAO,CACLC,IAAI,GAAD,OAJO,GAIP,KACHC,KAAK,GAAD,OAJO,GAIP,KACJC,UAAU,cAAD,OANC,GAMD,eALE,GAKF,OAIb,IAAMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,SAAU,WACVC,MAAO,IACPC,gBAAiBJ,EAAMK,QAAQC,WAAWL,MAC1CM,OAAQ,iBACRC,UAAWR,EAAMS,QAAQ,GACzBC,QAASV,EAAMW,QAAQ,EAAG,EAAG,QAyNlBC,MArNf,WAAgB,IAAD,EACQC,IAAMlF,SAAS+D,GAA7BoB,EADM,oBAEPC,EAAUjB,IAFH,EAIanE,mBAAS,IAJtB,mBAINqF,EAJM,KAICC,EAJD,OAKWtF,oBAAS,GALpB,mBAKNuF,EALM,KAKAC,EALA,OAMmBxF,mBAAS,IAN5B,mBAMNH,EANM,KAMI4F,EANJ,OAOmBzF,mBAAS,IAP5B,mBAON0F,EAPM,KAOIC,EAPJ,OAQa3F,mBAAS,IARtB,mBAQN4F,EARM,KAQCC,EARD,OASW7F,mBAAS,MATpB,mBASNL,EATM,KASAmG,EATA,OAUuB9F,oBAAS,GAVhC,mBAUN+F,EAVM,KAUMC,EAVN,KAmEb,OAvDA3F,qBAAU,WACR,IAAMC,EAAcd,EAAKyG,oBAAmB,SAACC,GACvCA,GAEF3C,QAAQC,IAAI0C,GACZJ,EAAQI,IAGRJ,EAAQ,SAIZ,OAAO,WAELxF,OAED,CAACX,EAAME,IAGVQ,qBAAU,WACRzB,EAAG2B,WAAW,SACXE,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACX2E,EACE3E,EAASC,KAAKC,KAAI,SAACL,GAAD,MAAU,CAC1BW,GAAIX,EAAIW,GACRgF,KAAM3F,EAAIM,iBAIjB,IA0BD,yBAAKC,UAAU,OACb,kBAACqF,EAAA,EAAD,CAAOb,KAAMA,EAAMc,QAAS,kBAAMb,GAAQ,KACxC,yBAAKc,MAAOnB,EAAYpE,UAAWqE,EAAQd,OACzC,0BAAMvD,UAAU,cACd,gCACE,yBACEE,IAAI,wFACJF,UAAU,oBACVG,IAAI,MAIR,kBAACqF,EAAA,EAAD,CACEjF,KAAK,OACLC,YAAY,WACZC,MAAO3B,EACP4B,SAAU,SAACC,GACT+D,EAAY/D,EAAEC,OAAOH,UAGzB,kBAAC+E,EAAA,EAAD,CACEjF,KAAK,OACLC,YAAY,QACZC,MAAOoE,EACPnE,SAAU,SAACC,GACTmE,EAASnE,EAAEC,OAAOH,UAGtB,kBAAC+E,EAAA,EAAD,CACEjF,KAAK,OACLC,YAAY,WACZC,MAAOkE,EACPjE,SAAU,SAACC,GACTiE,EAAYjE,EAAEC,OAAOH,UAGzB,kBAACqB,EAAA,EAAD,CAAQvB,KAAK,SAASO,QA5DjB,SAACC,GACdA,EAAMC,iBAENvC,EACGgH,+BAA+BZ,EAAOF,GACtC7B,MAAK,SAACqC,GACL,OAAOA,EAASvG,KAAK8G,cAAc,CACjCxE,YAAapC,OAGhB6G,OAAM,SAACpD,GAAD,OAAWG,MAAMH,EAAMI,cAkDxB,cAQN,kBAAC0C,EAAA,EAAD,CAAOb,KAAMQ,EAAYM,QAAS,kBAAML,GAAc,KACpD,yBAAKM,MAAOnB,EAAYpE,UAAWqE,EAAQd,OACzC,0BAAMvD,UAAU,cACd,gCACE,yBACEE,IAAI,wFACJF,UAAU,oBACVG,IAAI,MAGR,kBAACqF,EAAA,EAAD,CACEjF,KAAK,OACLC,YAAY,QACZC,MAAOoE,EACPnE,SAAU,SAACC,GACTmE,EAASnE,EAAEC,OAAOH,UAGtB,kBAAC+E,EAAA,EAAD,CACEjF,KAAK,OACLC,YAAY,WACZC,MAAOkE,EACPjE,SAAU,SAACC,GACTiE,EAAYjE,EAAEC,OAAOH,UAGzB,kBAACqB,EAAA,EAAD,CAAQvB,KAAK,SAASO,QAjFjB,SAACC,GACdA,EAAMC,iBAENvC,EACGmH,2BAA2Bf,EAAOF,GAClCgB,OAAM,SAACpD,GAAD,OAAWG,MAAMH,EAAMI,YAEhCsC,GAAc,KA0EN,cAON,yBAAKjF,UAAU,cACb,yBACEA,UAAU,mBACVE,IAAI,wFACJC,IAAI,aAGLvB,EACC,kBAACkD,EAAA,EAAD,CAAQhB,QAAS,kBAAMrC,EAAKoH,YAA5B,UAEA,yBAAK7F,UAAU,uBACb,kBAAC8B,EAAA,EAAD,CACEhB,QAAS,WACPmE,GAAc,KAFlB,WAOA,kBAACnD,EAAA,EAAD,CACEhB,QAAS,WACP2D,GAAQ,KAFZ,aAWN,yBAAKzE,UAAU,aACb,yBAAKA,UAAU,kBACZsE,EAAMxE,KAAI,gBAAGM,EAAH,EAAGA,GAAIgF,EAAP,EAAOA,KAAP,OACT,kBAAC,EAAD,CACE/E,IAAKD,EACLvB,OAAQuB,EACRxB,KAAMA,EACNE,SAAUsG,EAAKtG,SACfC,QAASqG,EAAKrG,QACdC,SAAUoG,EAAKpG,iBAqBlB,OAAJJ,QAAI,IAAJA,OAAA,EAAAA,EAAMsC,aACL,kBAAC,EAAD,CAAapC,SAAUF,EAAKsC,cAE5B,mECtOY4E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5D,MAAK,SAAA6D,GACJA,EAAaC,gBAEdjB,OAAM,SAAApD,GACLC,QAAQD,MAAMA,EAAMI,c","file":"static/js/main.363a8f31.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"AIzaSyBQWy2w1zeV2JxEGAqP2HZ1OtcPq6hwTCc\",\n    authDomain: \"instagram-clone-3da67.firebaseapp.com\",\n    databaseURL: \"https://instagram-clone-3da67.firebaseio.com\",\n    projectId: \"instagram-clone-3da67\",\n    storageBucket: \"instagram-clone-3da67.appspot.com\",\n    messagingSenderId: \"501093658567\",\n    appId: \"1:501093658567:web:1104cd4c5629032353f3e2\",\n    measurementId: \"G-QL5SW6SFSH\"\n});\n\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\n\nexport { db, auth, storage };\n","import React, { useState, useEffect } from \"react\";\nimport \"./Post.css\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { db } from \"../../firebase\";\n\nimport firebase from \"firebase\";\n\nfunction Post({ user, postId, username, caption, imageUrl }) {\n  const [comments, setComments] = useState([]);\n  const [comment, setComment] = useState(\"\");\n\n  // useEffect--> run a piece of code based on condtion and run every time whe condition change\n  useEffect(() => {\n    let unsubscribe;\n    if (postId) {\n      unsubscribe = db\n        .collection(\"posts\")\n        .doc(postId)\n        .collection(\"comments\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) => {\n          setComments(snapshot.docs.map((doc) => doc.data()));\n        });\n    }\n    return () => {\n      unsubscribe();\n    };\n  }, [postId]);\n\n  const postComment = (event) => {\n    event.preventDefault();\n\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n      text: comment,\n      username: user.displayName,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    setComment(\"\");\n  };\n\n  return (\n    <div className=\"post\">\n      <div className=\"post-header\">\n        <Avatar className=\"post-avatar\" src={imageUrl} alt={username} />\n        <h3>{username}</h3>\n      </div>\n      <img className=\"post-image\" src={imageUrl} alt=\"avtar\" />\n\n      <h4 className=\"post-text\">\n        <strong>{username}</strong>\n        {caption}\n      </h4>\n\n      <div className=\"post-comments\">\n        {comments.map((comment, id) => (\n          <p key={id}>\n            <strong>{comment.username}</strong>\n            {comment.text}\n          </p>\n        ))}\n      </div>\n\n      {user && (\n        <form className=\"post-comment-box\">\n          <input\n            className=\"post-input\"\n            type=\"text\"\n            placeholder=\"add a comment...\"\n            value={comment}\n            onChange={(e) => setComment(e.target.value)}\n          />\n          <button\n            className=\"post-button\"\n            disabled={!comment}\n            type=\"submit\"\n            onClick={postComment}\n          >\n            Post\n          </button>\n        </form>\n      )}\n    </div>\n  );\n}\n\nexport default Post;\n","import React, { useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { storage, db } from \"../../firebase\";\nimport firebase from \"firebase\";\n\nimport './UploadImage.css';\n\nfunction UploadImage({ username }) {\n  const [caption, setCaption] = useState(\"\");\n  const [image, setImage] = useState(null);\n  const [progress, setProgress] = useState(0);\n\n  const handleChange = (e) => {\n    if (e.target.files[0]) {\n      setImage(e.target.files[0]);\n    }\n  };\n  const handleUpload = () => {\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\n\n    uploadTask.on(\n      \"state_changed\",\n      (snapshot) => {\n        // progress function\n        const progress = Math.round(\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n        );\n        setProgress(progress);\n      },\n      (error) => {\n        // error function\n        console.log(error);\n        alert(error.message);\n      },\n      () => {\n        // complete function\n        storage\n          .ref(\"images\")\n          .child(image.name)\n          .getDownloadURL()\n          .then((url) => {\n            // post image inside db\n            db.collection(\"posts\").add({\n              timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n              caption: caption,\n              imageUrl: url,\n              username: username,\n            });\n\n            setProgress(0);\n            setCaption(\"\");\n            setImage(null);\n          });\n      }\n    );\n  };\n  return (\n    <div className = 'image-upload'>\n      <progress className = 'image-upload-progress' value={progress} max=\"100\" />\n      <input\n        type=\"text\"\n        placeholder=\"Enter a caption...\"\n        onChange={(event) => setCaption(event.target.value)}\n        value={caption}\n      />\n      <input type=\"file\" onChange={handleChange} />\n      <Button onClick={handleUpload}>Upload</Button>\n    </div>\n  );\n}\n\nexport default UploadImage;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Post from \"./component/Post/Post\";\nimport { db } from \"./firebase\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Button, Input } from \"@material-ui/core\";\nimport { auth } from \"./firebase\";\nimport UploadImage from \"./component/UploadImage/UploadImage\";\n\nimport InstagramEmbed from \"react-instagram-embed\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const [modalStyle] = React.useState(getModalStyle);\n  const classes = useStyles();\n\n  const [posts, setPosts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [openSignIn, setOpenSignIn] = useState(false);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        // user has login\n        console.log(authUser);\n        setUser(authUser);\n      } else {\n        // user has logout\n        setUser(null);\n      }\n    });\n\n    return () => {\n      // perform some clean up actions\n      unsubscribe();\n    };\n  }, [user, username]);\n\n  // useEffect--> run a piece of code based on condtion and run every time whe condition change\n  useEffect(() => {\n    db.collection(\"posts\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setPosts(\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            post: doc.data(),\n          }))\n        );\n      });\n  }, []);\n\n  const signUp = (event) => {\n    event.preventDefault();\n\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((authUser) => {\n        return authUser.user.updateProfile({\n          displayName: username,\n        });\n      })\n      .catch((error) => alert(error.message));\n  };\n\n  const signIn = (event) => {\n    event.preventDefault();\n\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n\n    setOpenSignIn(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <Modal open={open} onClose={() => setOpen(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app-signup\">\n            <center>\n              <img\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                className=\" app-header-image\"\n                alt=\"\"\n              />\n            </center>\n\n            <Input\n              type=\"text\"\n              placeholder=\"username\"\n              value={username}\n              onChange={(e) => {\n                setUsername(e.target.value);\n              }}\n            />\n            <Input\n              type=\"text\"\n              placeholder=\"email\"\n              value={email}\n              onChange={(e) => {\n                setEmail(e.target.value);\n              }}\n            />\n            <Input\n              type=\"text\"\n              placeholder=\"password\"\n              value={password}\n              onChange={(e) => {\n                setPassword(e.target.value);\n              }}\n            />\n            <Button type=\"submit\" onClick={signUp}>\n              Sign Up\n            </Button>\n          </form>\n        </div>\n      </Modal>\n\n      {/* Singin modal */}\n      <Modal open={openSignIn} onClose={() => setOpenSignIn(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app-signup\">\n            <center>\n              <img\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                className=\" app-header-image\"\n                alt=\"\"\n              />\n            </center>\n            <Input\n              type=\"text\"\n              placeholder=\"email\"\n              value={email}\n              onChange={(e) => {\n                setEmail(e.target.value);\n              }}\n            />\n            <Input\n              type=\"text\"\n              placeholder=\"password\"\n              value={password}\n              onChange={(e) => {\n                setPassword(e.target.value);\n              }}\n            />\n            <Button type=\"submit\" onClick={signIn}>\n              Sign In\n            </Button>\n          </form>\n        </div>\n      </Modal>\n\n      <div className=\"app-header\">\n        <img\n          className=\"app-header-image\"\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n          alt=\"app_logo\"\n        />\n\n        {user ? (\n          <Button onClick={() => auth.signOut()}>Logout</Button>\n        ) : (\n          <div className=\"app-login-container\">\n            <Button\n              onClick={() => {\n                setOpenSignIn(true);\n              }}\n            >\n              Sign In\n            </Button>\n            <Button\n              onClick={() => {\n                setOpen(true);\n              }}\n            >\n              Sign Up\n            </Button>\n          </div>\n        )}\n      </div>\n\n      <div className=\"app-posts\">\n        <div className=\"app-posts-left\">\n          {posts.map(({ id, post }) => (\n            <Post\n              key={id}\n              postId={id}\n              user={user}\n              username={post.username}\n              caption={post.caption}\n              imageUrl={post.imageUrl}\n            />\n          ))}\n        </div>\n       {/* <div className=\"app-posts-right\">\n          <InstagramEmbed\n            url=\"https://www.instagram.com/p/CDmJeOdjrgs/\"\n            maxWidth={320}\n            hideCaption={false}\n            containerTagName=\"div\"\n            protocol=\"\"\n            injectScript\n            onLoading={() => {}}\n            onSuccess={() => {}}\n            onAfterRender={() => {}}\n            onFailure={() => {}}\n          />\n        </div>\n          */}\n      </div>\n\n      {user?.displayName ? (\n        <UploadImage username={user.displayName} />\n      ) : (\n        <h3>Sorry you need to login to upload</h3>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}